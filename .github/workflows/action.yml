name: Continious Integration
on: [push]
jobs:

  run_tests:
    runs-on: ubuntu-latest
    env:
      DEBUG: False
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      DB_PORT: 5432
      DB_ENGINE: django.db.backends.postgresql_psycopg2
      SECRET_KEY: 'hello-world-qwerty'
      VK_OAUTH2_KEY: 112233445566778899
      VK_OAUTH2_SECRET: 112233445566778899
      TG_TOKEN: '0000000000:helloworld123'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Create env file and run docker-compose
        run: |
          env > .env
          docker-compose build
      - name: Run_tests
        run: |
          docker-compose run --rm api python manage.py test
          docker ps -aqf "name=todolist_api_1"

  build_and_push:
    runs-on: ubuntu-latest
    if: github.ref_name != 'tests'
    needs: run_tests
    steps:
      # Code clone
      - name: clone code
        uses: actions/checkout@v2
      # Build container
      - name: docker build
        run: docker build -t puzynjailya/todolist:$GITHUB_RUN_ID .
      # Login to docker
      - name: docker login
        run: echo ${{ secrets.DOCKERHUB_TOKEN}} | docker login -u ${{ secrets.DOCKERHUB_USERNAME}} --password-stdin
      # Push container
      - name: docker push
        run: docker push puzynjailya/todolist:$GITHUB_RUN_ID

  deploy:
    runs-on: ubuntu-latest
    if: github.ref_name != 'tests'
    needs: build_and_push
    env:
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_ENGINE: ${{ secrets.DB_ENGINE }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      VK_OAUTH2_KEY: ${{ secrets.VK_OAUTH2_KEY }}
      VK_OAUTH2_SECRET: ${{ secrets.VK_OAUTH2_SECRET }}
      TG_TOKEN: ${{ secrets.TG_TOKEN }}
    steps:
      - name: clone code
        uses: actions/checkout@v2

      - name: create and fill config files
        run: |
          mkdir deploy
          mkdir -p deploy/todo-list-frontend/docker/
          cat docker-compose-ci.yaml | envsubst > deploy/docker-compose.yaml
          cp ./configs/nginx.conf deploy/todo-list-frontend/docker/nginx.conf
          cat ./configs/.env.deploy | envsubst > deploy/.env

      #- name: collect static
        #run: |
          #docker run --user 0 --rm --env-file $(pwd)/deploy/.env -v $(pwd)/deploy/nginx/static/:/opt/todolist/static/:rw puzynjailya/todolist:$GITHUB_RUN_ID
          #python manage.py collectstatic -c --no-input

      - name: clone data to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: "deploy/*"
          target: "todolist"
          strip_components: 1

      - name: run docker-compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd todolist
            docker-compose up -d

      - name: clean unused images
        if: always()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script:  |
            cd todolist
            docker image prune -a -f



