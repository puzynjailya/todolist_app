version: '3.9'
services:

  frontend:
    image: sermalenk/skypro-front:lesson-38
    restart: always
    ports:
      - 80:80
    volumes:
      - ./todo-list-frontend/docker/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./configs/static/:/opt/static/
    networks:
      - frontend_net

  api:
    image: puzynjailya/todolist:$GITHUB_RUN_ID
    restart: always
    env_file:
      - .env
    depends_on:
      pg:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    command: python manage.py runserver 0.0.0.0:8000
    networks:
      - backend_net
      - frontend_net

  telegram_bot:
    image: puzynjailya/todolist:$GITHUB_RUN_ID
    env_file:
      - .env
    environment:
      POSTGREST_HOST: pg
    depends_on:
      pg:
        condition: service_healthy
    command: python manage.py runbot
    networks:
      - backend_net

  migrations:
    image: puzynjailya/todolist:$GITHUB_RUN_ID
    env_file:
      - .env
    environment:
      POSTGRES_HOST: $DB_HOST
    depends_on:
      pg:
        condition: service_healthy
    command: sh -c "python manage.py migrate"
    networks:
      - backend_net

  pg:
    image: postgres:14.5-alpine
    restart: always
    environment:
      POSTGRES_DB: $DB_NAME
      POSTGRES_USER: $DB_USER
      POSTGRES_PASSWORD: $DB_PASSWORD
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U $DB_USER -d $DB_NAME
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend_net

volumes:
  postgres_data:

networks:
  backend_net:
    driver: bridge
  frontend_net:
    driver: bridge

